// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebBanking.Rest.Data;

namespace WebBanking.Rest.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210116200638_ChangeFewPropertyType")]
    partial class ChangeFewPropertyType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebBanking.Rest.Models.AcctHolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AccountNumber")
                        .HasColumnType("float");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Pin")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("phonenumber")
                        .HasColumnType("float");

                    b.Property<string>("photopath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountNumber = 20005.0,
                            Balance = 50000.0,
                            CreatedAt = new DateTime(2021, 1, 16, 20, 6, 37, 81, DateTimeKind.Utc).AddTicks(9180),
                            FullName = "chima",
                            IdentityId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Pin = 2020,
                            TransactionId = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            phonenumber = 0.0,
                            photopath = "image2.jpg"
                        });
                });

            modelBuilder.Entity("WebBanking.Rest.Models.AirtimeTopUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("PhoneNo")
                        .HasColumnType("float");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("networkType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("AirtimeTopUps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 500,
                            CreatedAt = new DateTime(2021, 1, 16, 20, 6, 37, 86, DateTimeKind.Utc).AddTicks(8510),
                            PhoneNo = 9094096185.0,
                            SenderId = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            networkType = 3
                        });
                });

            modelBuilder.Entity("WebBanking.Rest.Models.CableRecharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CableNo")
                        .HasColumnType("int");

                    b.Property<int>("CableType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("CableRecharges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 2900,
                            CableNo = 9012345,
                            CableType = 1,
                            CreatedAt = new DateTime(2021, 1, 16, 20, 6, 37, 88, DateTimeKind.Utc).AddTicks(4),
                            SenderId = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WebBanking.Rest.Models.CashWithdrawal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WithdrawerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WithdrawerId");

                    b.ToTable("CashWithdrawals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1000,
                            CreatedAt = new DateTime(2021, 1, 16, 20, 6, 37, 87, DateTimeKind.Utc).AddTicks(3463),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WithdrawerId = 1
                        });
                });

            modelBuilder.Entity("WebBanking.Rest.Models.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GetTransactionType")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("theTransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 1, 16, 20, 6, 37, 88, DateTimeKind.Utc).AddTicks(5725),
                            GetTransactionType = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 20005,
                            theTransactionId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 1, 16, 20, 6, 37, 88, DateTimeKind.Utc).AddTicks(6635),
                            GetTransactionType = 3,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 20005,
                            theTransactionId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 1, 16, 20, 6, 37, 88, DateTimeKind.Utc).AddTicks(6738),
                            GetTransactionType = 4,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 20005,
                            theTransactionId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2021, 1, 16, 20, 6, 37, 88, DateTimeKind.Utc).AddTicks(6936),
                            GetTransactionType = 2,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 20005,
                            theTransactionId = 1
                        });
                });

            modelBuilder.Entity("WebBanking.Rest.Models.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReciverAccountNo")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WhichBank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Transfers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 2000,
                            CreatedAt = new DateTime(2021, 1, 16, 20, 6, 37, 86, DateTimeKind.Utc).AddTicks(1038),
                            ReciverAccountNo = 20006,
                            SenderId = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhichBank = 3
                        });
                });

            modelBuilder.Entity("WebBanking.Rest.Models.AirtimeTopUp", b =>
                {
                    b.HasOne("WebBanking.Rest.Models.AcctHolder", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebBanking.Rest.Models.CableRecharge", b =>
                {
                    b.HasOne("WebBanking.Rest.Models.AcctHolder", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebBanking.Rest.Models.CashWithdrawal", b =>
                {
                    b.HasOne("WebBanking.Rest.Models.AcctHolder", "Withdrawer")
                        .WithMany()
                        .HasForeignKey("WithdrawerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebBanking.Rest.Models.Transactions", b =>
                {
                    b.HasOne("WebBanking.Rest.Models.AcctHolder", null)
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionId");
                });

            modelBuilder.Entity("WebBanking.Rest.Models.Transfer", b =>
                {
                    b.HasOne("WebBanking.Rest.Models.AcctHolder", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
